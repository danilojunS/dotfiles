;;; PACKAGE MANAGEMENT SETTINGS
(require 'package)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

(setq package-enable-at-startup nil)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

;;; BACKUP AND AUTOSAVE SETTINGS

(setq
   backup-by-copying t
   backup-directory-alist `((".*" . ,temporary-file-directory))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)

(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

(savehist-mode 1)

;;; GENERAL SETTINGS

(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)))

(use-package linum-relative
  :ensure t
  :config
  (linum-mode)
  (linum-relative-global-mode))

(use-package expand-region
  :ensure t
  :config
  (setq expand-region-contract-fast-key "z"))

(use-package dtrt-indent
  :ensure t
  :config
  (dtrt-indent-mode 1)
  (setq-default tab-width 2 indent-tabs-mode nil)
  (setq-default c-basic-offset 2 c-default-style "bsd"))

(use-package elscreen
  :ensure t
  :config
  (elscreen-start)
  (elscreen-set-prefix-key "\C-a"))

(use-package autopair
  :ensure t
  :config
  (autopair-global-mode))

(show-paren-mode 1)
(setq show-paren-style 'mixed)

(global-set-key [s-left] 'windmove-left)
(global-set-key [s-right] 'windmove-right)
(global-set-key [s-up] 'windmove-up)
(global-set-key [s-down] 'windmove-down)

(scroll-bar-mode -1)

(add-hook 'before-save-hook 'delete-trailing-whitespace)

;;; KEY-CHORD SETTINGS

(use-package key-chord
  :ensure t
  :config
  (key-chord-mode 1)
  (setq key-chord-two-keys-delay 0.3))

;;; HELM SETTINGS

(use-package helm
  :ensure t
  ;:diminish helm-mode
  ;:commands helm-mode
  :config
  (helm-mode 1)
  (setq helm-M-x-fuzzy-match t)
  (setq helm-mode-fuzzy-match t)
  (setq helm-completion-in-region-fuzzy-match t)
  (setq helm-candidate-number-limit 30)
  (global-set-key (kbd "M-x") 'helm-M-x))

(use-package helm-projectile
  :ensure t
  :config
  (helm-projectile-on))

;;; PROJECTILE SETTINGS

(setq projectile-directories-to-ignore-list '(
  "_build"
  "deps"
  "node_modules"
))

(use-package projectile
  :ensure t
  :config
  (projectile-global-mode)
  (setq projectile-completion-system 'helm)
  (setq projectile-switch-project-action 'projectile-dired)
  (setq projectile-enable-caching t)
  (dolist (dir projectile-directories-to-ignore-list)
    (add-to-list 'projectile-globally-ignored-directories dir)
    (add-to-list 'grep-find-ignored-directories dir)))

;;; NEOTREE SETTINGS

(use-package all-the-icons
  :ensure t
  :config
  ;; workaround to avoid symbol void definition error
  (defalias 'find-if 'cl-find-if))

(use-package neotree
  :ensure t
  :config
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (setq neo-smart-open t)
  (setq projectile-switch-project-action 'neotree-projectile-action))

;;; IMENU-LIST SETTINGS

(use-package imenu-list
  :ensure t
  :config
  (setq imenu-list-focus-after-activation t)
  (setq imenu-list-auto-resize t))

;;; COMPANY SETTINGS

(use-package company
  :ensure t
  :config
  (global-company-mode)
  (setq company-selection-wrap-around t)
  (define-key company-active-map (kbd "<tab>") 'company-select-next)
  (define-key company-active-map (kbd "<S-tab>") 'company-select-previous)
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous))

;;; FLYCHECK SETTINGS

(use-package flycheck
  :ensure t
  :config
  (global-flycheck-mode)
  (setq-default flycheck-disabled-checkers
    (append flycheck-disabled-checkers '(javascript-jshint)))
  (setq-default flycheck-disabled-checkers
    (append flycheck-disabled-checkers '(json-jsonlist)))
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (setq-default flycheck-temp-prefix ".flycheck"))

;;; SILVER SEARCHER SETTINGS

(use-package ag
  :ensure t
  :commands (ag ag-project)
  :config
  (setq ag-executable "/usr/local/bin/ag")
  (setq ag-highlight-search t)
  (setq ag-reuse-buffers t))

;;; EVIL MODE SETTINGS

(use-package evil
  :ensure t
  :init
  (setq evil-want-C-u-scroll t)
  :config
  (evil-mode 1)

  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "s"  'helm-mini
      "t"  'neotree-project-dir
      "b"  'imenu-list-smart-toggle
      "e"  'flycheck-list-errors
      "xx" 'er/expand-region))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))

  (use-package evil-nerd-commenter
    :ensure t
    :config
    (global-set-key (kbd "M-;") 'evilnc-comment-or-uncomment-lines))

  (use-package evil-matchit
    :ensure t
    :config
    (global-evil-matchit-mode 1))

  (evil-define-key 'normal neotree-mode-map (kbd "o") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
  (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "R") 'neotree-refresh)
  (evil-define-key 'normal neotree-mode-map (kbd "i") 'neotree-enter-horizontal-split)
  (evil-define-key 'normal neotree-mode-map (kbd "s") 'neotree-enter-vertical-split)

  (key-chord-define evil-normal-state-map "]e" 'flycheck-next-error)
  (key-chord-define evil-normal-state-map "[e" 'flycheck-previous-error)

  (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))

;;; THEME SETTINGS

(use-package seti-theme
  :ensure t
  :config
  (load-theme 'seti t))

(use-package powerline
  :ensure t
  :config
  (powerline-center-evil-theme)
  (display-time-mode t))

;;; LANGUAGES SETTINGS

(use-package web-mode
  :ensure t
  :defer t
  :config
  (setq web-mode-attr-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-indent-style 2)
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-sql-indent-offset 2))

(use-package js2-mode
  :ensure t
  :mode "\\.js\\'"
  :config
  (setq js2-highlight-level 3)
  (setq js2-mode-show-parse-errors nil)
  (setq js2-mode-show-strict-warnings nil))

(use-package json-mode
  :ensure t)

(use-package alchemist
  :ensure t)

(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "markdown"))

;;; AUXILIARY FUNCTIONS

(defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (projectile-project-root))
          (file-name (buffer-file-name)))
      (neotree-toggle)
      (if project-dir
          (if (neo-global--window-exists-p)
              (progn
                (neotree-dir project-dir)
                (neotree-find file-name)))
        (message "Could not find git project root."))))

;;; DO NOT TOUCH! - Automatic generated configs

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages (quote (all-the-icons evil paganini-theme))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
